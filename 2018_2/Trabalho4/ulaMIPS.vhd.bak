library ieee;
use ieee.numeric_std.all;
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_signed.all;
entity ulaMIPS is
		port (
				opcode			: in std_logic_vector(3 downto 0);
				a, b				: in std_logic_vector (31 downto 0);
				Z					: out std_logic_vector (31 downto 0);
				zero, ovfl		: out std_logic
				);
end ulaMIPS;

architecture Behavioral of ulaMIPS is
signal result: std_logic_vector(31 downto 0);
begin
process(opcode,a,b)
begin
 case opcode is
 when "0000" =>	   		-- and
	result <= a and b;
 
 when "0001" =>	   		-- or
	result <= a or b;			
 
 when "0010" => 				-- add
  result <= a + b;
 
 when "0011" => 				-- addu
  result <= std_logic_vector(unsigned(a+b));
 
 when "0100" => 				-- sub
  result <= a - b;
 
 when "0101" => 				-- subu
  result <= std_logic_vector(unsigned(a - b));
 
 when "0110" =>				-- slt
  if (a<b) then
   result <= x"00000001";
  else 
   result <= x"00000000";
  end if; 					
 
 when "0111" => 				-- sltu
  if (unsigned(a)<unsigned(b)) then
   result <= x"00000001";
  else 
   result <= x"00000000";
  end if; 				
 
 when "1000" =>				-- nor
  result <= a nor b;
 
 when "1001" =>				-- xor
  result <= a xor b;
 
-- when "1010" => 				-- sll
--  result <= std_logic_vector(shift_left(to_integer(unsigned(b)), to_integer(unsigned(a))));
 
-- when "1011" => 				-- srl
--  result <= b srl integer(a) ;
 
-- when "1100" => 				-- sra
--  result <= b sra a;
 
 when "1101" => 				-- clz
  result <= x"00000000";
 
 when "1110" => 				-- clo
  result <= x"00000000";
  
 when others => result <= a + b; -- add
 end case;
end process;
  zero <= '1' when result=x"00000000" else '0';
  Z <= result;
end Behavioral;